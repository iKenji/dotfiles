(function() {
  var CompositeDisposable, Emitter, MATCH_PAIRS, RailroadDiagramElement, Range, debounce, issue58, _ref;

  _ref = require('atom'), CompositeDisposable = _ref.CompositeDisposable, Emitter = _ref.Emitter, Range = _ref.Range;

  debounce = require("underscore-plus").debounce;

  RailroadDiagramElement = require("./railroad-diagram-element.coffee");

  MATCH_PAIRS = {
    '(': ')',
    '[': ']',
    '{': '}',
    '<': '>'
  };

  issue58 = true;

  module.exports = {
    regexRailroadDiagramView: null,
    activate: function(state) {
      this.subscriptions = new CompositeDisposable;
      this.emitter = new Emitter;
      this.subscriptions.add(atom.workspace.observeTextEditors((function(_this) {
        return function(editor) {
          return _this.subscriptions.add(editor.onDidChangeCursorPosition(debounce((function() {
            return _this.checkForRegExp();
          }), 100)));
        };
      })(this)));
      return this.element = (new RailroadDiagramElement).initialize(this);
    },
    deactivate: function() {
      return this.subscriptions.dispose();
    },
    serialize: function() {},
    bufferRangeForScope: function(editor, scope, position) {
      var end, endTabs, lineStart, m, result, start, startTabs, tabLength;
      if (position == null) {
        position = null;
      }
      if (!issue58) {
        if (position != null) {
          result = editor.displayBuffer.bufferRangeForScopeAtPosition(scope, position);
        } else {
          result = editor.bufferRangeForScopeAtCursor(scope);
        }
        return result;
      }
      tabLength = editor.getTabLength();
      if (position == null) {
        position = editor.getCursorBufferPosition().copy();
      }
      lineStart = [[position.row, 0], [position.row, position.column]];
      if (m = editor.getTextInBufferRange(lineStart).match(/\t/g)) {
        startTabs = m.length;
      } else {
        startTabs = 0;
      }
      if (startTabs) {
        position.column = position.column - startTabs + startTabs * tabLength;
      }
      result = editor.displayBuffer.bufferRangeForScopeAtPosition(scope, position);
      if (!result) {
        return result;
      }
      start = result.start, end = result.end;
      lineStart = [[end.row, 0], [end.row, end.column]];
      if (m = editor.getTextInBufferRange(lineStart).match(/\t/g)) {
        endTabs = m.length;
      } else {
        endTabs = 0;
      }
      return new Range([start.row, start.column - startTabs * tabLength + startTabs], [end.row, end.column - endTabs * tabLength + endTabs]);
    },
    getRegexpBufferRange: function(editor) {
      var flavour, position, range;
      position = editor.getCursorBufferPosition();
      flavour = editor.scopeDescriptorForBufferPosition(position).scopes[0];
      range = this.bufferRangeForScope(editor, '.raw-regex');
      if (!range) {
        range = this.bufferRangeForScope(editor, '.unicode-raw-regex');
      }
      if (!range) {
        range = this.bufferRangeForScope(editor, '.regexp');
      }
      if (!range) {
        return [null, null];
      }
      return [range, flavour];
    },
    cleanRegex: function(regex, flavour) {
      var close, expectedClose, m, open, opts, regexForEscaped, text, _ref1, _ref2, _ref3, _ref4, _ref5;
      opts = "";
      console.log("regex", regex, "flavour", flavour);
      if (m = flavour.match(/php/) && regex.match(/^(["'])\/(.*)\/(\w*)\1$/)) {
        _ref1 = m.slice(2), regex = _ref1[0], opts = _ref1[1];
      } else if (m = flavour.match(/python/) && regex.match(/^u?r('''|"""|"|')(.*)\1$/)) {
        regex = m[2];
      } else if (m = flavour.match(/coffee/) && regex.match(/^\/\/\/(.*)\/\/\/(\w*)/)) {
        _ref2 = m.slice(1), regex = _ref2[0], opts = _ref2[1];
      } else if (m = flavour.match(/ruby/) && regex.match(/^%r(.)(.*)(\W)(\w*)$/)) {
        _ref3 = m.slice(1), open = _ref3[0], text = _ref3[1], close = _ref3[2], opts = _ref3[3];
        expectedClose = MATCH_PAIRS[open] || open;
        if (close !== expectedClose) {
          text = text + close + m[4];
          close = expectedClose;
        }
        regexForEscaped = new RegExp("\\\\(" + open + "|" + close + ")", 'g');
        regex = text.replace(/\//, '\\/').replace(regexForEscaped, '$1');
      } else if (m = flavour.match(/perl/) && (regex.match(/^(?:m|qr)(.)(.*)(\1|\W)(\w*)$/) || regex.match(/^s(.)(.*)(\1|\W)(?:\1.*\W|.*\1)(\w*)$/))) {
        _ref4 = m.slice(1), open = _ref4[0], text = _ref4[1], close = _ref4[2], opts = _ref4[3];
        expectedClose = MATCH_PAIRS[open] || open;
        if (close !== expectedClose) {
          text = text + close + m[4];
          close = expectedClose;
        }
        regexForEscaped = new RegExp("\\\\(" + open + "|" + close + ")", 'g');
        regex = text.replace(/\//, '\\/').replace(regexForEscaped, '$1');
      } else if (m = regex.match(/^\/(.*)\/(\w*)$/)) {
        _ref5 = m.slice(1), regex = _ref5[0], opts = _ref5[1];
      }
      console.log("regex", regex, "flavour", flavour, "opts", opts);
      return [regex, opts];
    },
    checkForRegExp: function() {
      var editor, flavour, options, range, regex, _ref1, _ref2;
      editor = atom.workspace.getActiveTextEditor();
      if (editor == null) {
        return;
      }
      _ref1 = this.getRegexpBufferRange(editor), range = _ref1[0], flavour = _ref1[1];
      if (!range) {
        return this.element.assertHidden();
      } else {
        regex = editor.getTextInBufferRange(range).trim();
        if (regex === '/') {
          return this.element.assertHidden();
        }
        _ref2 = this.cleanRegex(regex, flavour), regex = _ref2[0], options = _ref2[1];
        return this.element.showDiagram(regex, {
          flavour: flavour,
          options: options
        });
      }
    }
  };

}).call(this);

//# sourceMappingURL=data:application/json;base64,

//# sourceURL=/Users/ichihashi_kenji/.atom/packages/regex-railroad-diagram/lib/regex-railroad-diagram.coffee
